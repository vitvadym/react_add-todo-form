{"version":3,"sources":["components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/users.ts","helpers/getUser.tsx","todosList.tsx","api/todos.ts","App.tsx","index.tsx"],"names":["UserInfo","user","name","email","className","href","TodoInfo","todo","title","id","completed","TodoList","todos","map","username","getUser","userId","usersFromServer","find","todosList","App","useState","setTodos","selectedUser","setSelectedUser","setTitle","titleErrorField","seTtitleErrorField","selectErrorField","setSelectErrorField","action","method","onSubmit","event","preventDefault","createId","arr","ids","item","Math","max","prevTodos","newTodo","type","placeholder","value","onChange","target","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.d5a7a435.chunk.js","sourcesContent":["import { FC } from 'react';\nimport { User } from '../../types/User';\n\ntype PropsUser = {\n  user: User;\n};\n\nexport const UserInfo: FC<PropsUser> = ({ user }) => {\n  const { name, email } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import { FC } from 'react';\nimport { Todo } from '../../types/Todo';\nimport { UserInfo } from '../UserInfo';\n\ntype PropsTodo = {\n  todo: Todo;\n};\n\nexport const TodoInfo: FC<PropsTodo> = ({ todo }) => {\n  const {\n    title,\n    id,\n    completed,\n    user,\n  } = todo;\n\n  return (\n    <article\n      data-id={id}\n      className={\n        completed\n          ? 'TodoInfo TodoInfo--completed'\n          : 'TodoInfo'\n      }\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n\n      {user && (\n        <UserInfo user={user} />\n      )}\n    </article>\n  );\n};\n","import { FC } from 'react';\nimport { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo';\n\ntype PropsTodo = {\n  todos: Todo[];\n};\n\nexport const TodoList: FC<PropsTodo> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => (\n        <TodoInfo key={todo.id} todo={todo} />\n      ))}\n    </section>\n  );\n};\n","export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import usersFromServer from '../api/users';\n\nexport const getUser = (userId: number) => {\n  const foundUser = usersFromServer.find(user => (\n    userId === user.id\n  ));\n\n  return foundUser || null;\n};\n","import { Todo } from './types/Todo';\nimport todosFromServer from './api/todos';\nimport { getUser } from './helpers/getUser';\n\nexport const todosList: Todo[] = todosFromServer.map(todo => {\n  return {\n    ...todo,\n    user: getUser(todo.userId),\n  };\n});\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import './App.scss';\nimport { FC, useState } from 'react';\nimport { TodoList } from './components/TodoList';\nimport { Todo } from './types/Todo';\nimport usersFromServer from './api/users';\nimport { getUser } from './helpers/getUser';\nimport { todosList } from './todosList';\n\nexport const App: FC = () => {\n  const [todos, setTodos] = useState([...todosList]);\n  const [selectedUser, setSelectedUser] = useState(0);\n  const [title, setTitle] = useState('');\n  const [titleErrorField, seTtitleErrorField] = useState(false);\n  const [selectErrorField, setSelectErrorField] = useState(false);\n\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (!title) {\n      seTtitleErrorField(true);\n    }\n\n    if (!selectedUser) {\n      setSelectErrorField(true);\n    }\n\n    if (title && selectedUser) {\n      const createId = (arr:Todo[]) => {\n        const ids = arr.map(item => item.id);\n\n        return Math.max(...ids) + 1;\n      };\n\n      setTodos(prevTodos => {\n        const newTodo: Todo = {\n          id: createId(prevTodos),\n          title,\n          completed: false,\n          userId: selectedUser,\n          user: getUser(selectedUser),\n        };\n\n        return [...prevTodos, newTodo];\n      });\n\n      setTitle('');\n      setSelectedUser(0);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form\n        action=\"/api/users\"\n        method=\"POST\"\n        onSubmit={handleSubmit}\n      >\n        <div className=\"field\">\n          <input\n            type=\"text\"\n            data-cy=\"titleInput\"\n            placeholder=\"Enter a title\"\n            value={title}\n            onChange={(event) => {\n              setTitle(event.target.value);\n              seTtitleErrorField(false);\n            }}\n          />\n          {titleErrorField && (\n            <span className=\"error\">Please enter a title</span>\n          )}\n        </div>\n\n        <div className=\"field\">\n          <select\n            data-cy=\"userSelect\"\n            value={selectedUser}\n            onChange={(event) => {\n              setSelectedUser(+event.target.value);\n              setSelectErrorField(false);\n            }}\n          >\n            <option value={0} disabled>\n              Choose a user\n            </option>\n\n            {usersFromServer.map(user => {\n              const { name, id } = user;\n\n              return (\n                <option key={id} value={id}>\n                  {name}\n                </option>\n              );\n            })}\n          </select>\n          {selectErrorField && (\n            <span className=\"error\">Please choose a user</span>\n          )}\n\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}